{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","poster_path","backdrop_path","onClick","movieTrailer","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70d6a582.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios';\r\nimport Youtube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\nimport './Row.css';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);     //if [], run once when the row loads, and dont run again\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters  --> documentation\r\n            autoplay: 1,\r\n        }\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if(trailerUrl){\r\n            setTrailerUrl('');\r\n        }else{\r\n            movieTrailer(movie?.title || movie?.name || movie?.original_name || \"\")\r\n            .then(url => {\r\n                const urlParams = new URLSearchParams( new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch(error => console.log(error));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie => movie.poster_path != null && movie.backdrop_path != null && (     \r\n                    <img\r\n                        onClick={() => handleClick(movie)}\r\n                        key={movie.id}\r\n                        className={`row_poster ${isLargeRow && 'row_posterLarge' }`}\r\n                        src={base_url + (isLargeRow ? movie.poster_path : movie.backdrop_path)} alt={movie.name} \r\n                    />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"847866472404192c2b83562235df0d8e\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css';\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n            ]);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[]);\r\n\r\n    function truncate(str, n){\r\n        return str?.length > n ? str.substr(0,n-1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\" \r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n                backgroundPosition: 'center center'\r\n            }}\r\n        >\r\n           <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">\r\n                    {truncate(movie?.overview,200)}</h1>\r\n            </div> \r\n\r\n            <div className=\"banner_fadeBottom\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100) handleShow(true);\r\n            else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    },[]);\r\n\r\n    return (\r\n        <div className={`nav ${show && 'nav_black'}`}>\r\n            <img\r\n                className=\"nav_logo\"\r\n                src=\"https://www.freepnglogos.com/uploads/netflix-logo-0.png\"\r\n                alt=\"Netflix Logo\" />\r\n            \r\n            <img\r\n                className=\"nav_avatar\"\r\n                src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" \r\n                alt=\"Netflix Logo\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Row from './Row';\r\nimport Banner from './Banner';\r\nimport Nav from './Nav.js';\r\nimport requests from './requests';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav />\r\n      <Banner />     \r\n      <Row \r\n        title = \"NETFLIX ORIGINALS\"\r\n        isLargeRow\r\n        fetchUrl = {requests.fetchNetflixOriginals}/>\r\n      <Row title = \"Trending Now\" fetchUrl = {requests.fetchTrending}/>\r\n      <Row title = \"Top Rated\" fetchUrl = {requests.fetchTopRated}/>\r\n      <Row title = \"Action Movies\" fetchUrl = {requests.fetchActionMovies}/>\r\n      <Row title = \"Comedy Movies\" fetchUrl = {requests.fetchComedyMovies}/>\r\n      <Row title = \"Horror Movies\" fetchUrl = {requests.fetchHorrorMovies}/>\r\n      <Row title = \"Romance Movies\" fetchUrl = {requests.fetchRomanceMovies}/>\r\n      <Row title = \"Documentaries\" fetchUrl = {requests.fetchDocumentaries}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}